#!/bin/bash

# Find out where the helper scripts are!
# The : ${...:...} syntax makes bash eval the dirname command only, if the ENV variable DIR is not set already
: ${DIR:=`dirname $0`}
echo "Setting superuser context."

# Allow to pre-define the path of structr.conf:
# The : ${...:...} syntax makes bash eval the find command only, if the ENV variable STRUCTURE_CONF is not set already
# Otherwise start by the top level of the su command itself
: ${STRUCTR_CONF:=`find $DIR/.. -name structr.conf`}
# Extend the search if it is still empty
: ${STRUCTR_CONF:=`find $DIR/../../../.. -name structr.conf`}
# TODO add some check to abort if there is more than one structr.conf found by the find command!

echo "Using $STRUCTR_CONF as main configuration file."

# Now prepend current dir in front of other pathes!
PATH=:$DIR:$PATH

HOST=`grep application.host $STRUCTR_CONF | awk '{ print $3 }' | tr -d [:cntrl:]`
PORT=`grep application.http.port $STRUCTR_CONF | awk '{ print $3 }' | tr -d [:cntrl:]`
REST_PATH=`grep application.rest.path $STRUCTR_CONF | awk '{ print $3 }' | tr -d [:cntrl:]`

REST_URL=http://$HOST:$PORT$REST_PATH
REST_USER=`grep superuser.username $STRUCTR_CONF | awk '{ print $3 }' | tr -d [:cntrl:]`
REST_PW=`grep superuser.password $STRUCTR_CONF | awk '{ print $3 }' | tr -d [:cntrl:]`

export PATH
export REST_URL
export REST_USER
export REST_PW
